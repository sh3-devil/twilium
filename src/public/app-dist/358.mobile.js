(window.webpackJsonptrilium=window.webpackJsonptrilium||[]).push([[358],{6358:(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>a});var s=i(236),p=i(4378);class a{constructor(){$("#options-code-notes").html('\n<h4>Available MIME types in the dropdown</h4>\n\n<ul id="options-mime-types" style="max-height: 500px; overflow: auto; list-style-type: none;"></ul>'),this.$mimeTypes=$("#options-mime-types")}async optionsLoaded(){this.$mimeTypes.empty();let e=1;for(const t of await s.Z.getMimeTypes()){const i="code-mime-type-"+e++;this.$mimeTypes.append($("<li>").append($('<input type="checkbox">').attr("id",i).attr("data-mime-type",t.mime).prop("checked",t.enabled)).on("change",()=>this.save()).append(" &nbsp; ").append($("<label>").attr("for",i).text(t.title)))}}async save(){const e=[];this.$mimeTypes.find("input:checked").each((t,i)=>e.push($(i).attr("data-mime-type"))),await p.Z.save("codeNotesMimeTypes",JSON.stringify(e)),s.Z.loadMimeTypes()}}}}]);
//# sourceMappingURL=358.mobile.js.map