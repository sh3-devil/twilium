{"version":3,"sources":["webpack://trilium/./src/public/app/services/tree_context_menu.js"],"names":["treeWidget","node","this","e","x","pageX","y","pageY","items","getMenuItems","selectMenuItemHandler","item","command","title","type","uiIcon","note","data","noteId","branch","branchId","isNotRoot","isHoisted","parentNote","parentNoteId","selNodes","getSelectedNodes","noSelectedNotes","length","notSearch","parentNotSearch","insertNoteAfterEnabled","enabled","getNoteTypeItems","isProtected","filter","row","notePath","target","targetBranchId","triggerCommand"],"mappings":"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","file":"893.desktop.js","sourcesContent":["import treeService from './tree.js';\nimport treeCache from \"./tree_cache.js\";\nimport hoistedNoteService from './hoisted_note.js';\nimport clipboard from './clipboard.js';\nimport protectedSessionHolder from \"./protected_session_holder.js\";\nimport appContext from \"./app_context.js\";\nimport noteCreateService from \"./note_create.js\";\nimport contextMenu from \"./context_menu.js\";\n\nclass TreeContextMenu {\n    /**\n     * @param {NoteTreeWidget} treeWidget\n     * @param {FancytreeNode} node\n     */\n    constructor(treeWidget, node) {\n        this.treeWidget = treeWidget;\n        this.node = node;\n    }\n    \n    async show(e) {\n        contextMenu.show({\n            x: e.pageX,\n            y: e.pageY,\n            items: await this.getMenuItems(),\n            selectMenuItemHandler: (item, e) => this.selectMenuItemHandler(item, e)\n        })\n    }\n\n    getNoteTypeItems(command) {\n        return [\n            { title: \"Text\", command: command, type: \"text\", uiIcon: \"note\" },\n            { title: \"Code\", command: command, type: \"code\", uiIcon: \"code\" },\n            { title: \"Saved search\", command: command, type: \"search\", uiIcon: \"file-find\" },\n            { title: \"Relation Map\", command: command, type: \"relation-map\", uiIcon: \"map-alt\" },\n            { title: \"Render HTML note\", command: command, type: \"render\", uiIcon: \"extension\" },\n            { title: \"Book\", command: command, type: \"book\", uiIcon: \"book\" }\n        ];\n    }\n\n    async getMenuItems() {\n        const note = await treeCache.getNote(this.node.data.noteId);\n        const branch = treeCache.getBranch(this.node.data.branchId);\n        const isNotRoot = note.noteId !== 'root';\n        const isHoisted = note.noteId === hoistedNoteService.getHoistedNoteId();\n        const parentNote = isNotRoot ? await treeCache.getNote(branch.parentNoteId) : null;\n\n        // some actions don't support multi-note so they are disabled when notes are selected\n        // the only exception is when the only selected note is the one that was right-clicked, then\n        // it's clear what the user meant to do.\n        const selNodes = this.treeWidget.getSelectedNodes();\n        const noSelectedNotes = selNodes.length === 0\n                || (selNodes.length === 1 && selNodes[0] === this.node);\n\n        const notSearch = note.type !== 'search';\n        const parentNotSearch = !parentNote || parentNote.type !== 'search';\n        const insertNoteAfterEnabled = isNotRoot && !isHoisted && parentNotSearch;\n\n        return [\n            { title: 'Open in a new tab <kbd>Ctrl+Click</kbd>', command: \"openInTab\", uiIcon: \"empty\", enabled: noSelectedNotes },\n            { title: 'Open in a new window', command: \"openInWindow\", uiIcon: \"window-open\", enabled: noSelectedNotes },\n            { title: 'Insert note after <kbd data-command=\"createNoteAfter\"></kbd>', command: \"insertNoteAfter\", uiIcon: \"plus\",\n                items: insertNoteAfterEnabled ? this.getNoteTypeItems(\"insertNoteAfter\") : null,\n                enabled: insertNoteAfterEnabled && noSelectedNotes },\n            { title: 'Insert child note <kbd data-command=\"createNoteInto\"></kbd>', command: \"insertChildNote\", uiIcon: \"plus\",\n                items: notSearch ? this.getNoteTypeItems(\"insertChildNote\") : null,\n                enabled: notSearch && noSelectedNotes },\n            { title: 'Delete <kbd data-command=\"deleteNotes\"></kbd>', command: \"deleteNotes\", uiIcon: \"trash\",\n                enabled: isNotRoot && !isHoisted && parentNotSearch },\n            { title: \"----\" },\n            { title: 'Search in subtree <kbd data-command=\"searchInSubtree\"></kbd>', command: \"searchInSubtree\", uiIcon: \"search\",\n                enabled: notSearch && noSelectedNotes },\n            isHoisted ? null : { title: 'Hoist note <kbd data-command=\"toggleNoteHoisting\"></kbd>', command: \"toggleNoteHoisting\", uiIcon: \"empty\", enabled: noSelectedNotes && notSearch },\n            !isHoisted || !isNotRoot ? null : { title: 'Unhoist note <kbd data-command=\"ToggleNoteHoisting\"></kbd>', command: \"toggleNoteHoisting\", uiIcon: \"arrow-up\" },\n            { title: 'Edit branch prefix <kbd data-command=\"editBranchPrefix\"></kbd>', command: \"editBranchPrefix\", uiIcon: \"empty\",\n                enabled: isNotRoot && parentNotSearch && noSelectedNotes},\n            { title: \"Advanced\", uiIcon: \"empty\", enabled: true, items: [\n                    { title: 'Expand subtree <kbd data-command=\"expandSubtree\"></kbd>', command: \"expandSubtree\", uiIcon: \"expand\", enabled: noSelectedNotes },\n                    { title: 'Collapse subtree <kbd data-command=\"collapseSubtree\"></kbd>', command: \"collapseSubtree\", uiIcon: \"collapse\", enabled: noSelectedNotes },\n                    { title: \"Force note sync\", command: \"forceNoteSync\", uiIcon: \"refresh\", enabled: noSelectedNotes },\n                    { title: 'Sort alphabetically <kbd data-command=\"sortChildNotes\"></kbd>', command: \"sortChildNotes\", uiIcon: \"empty\", enabled: noSelectedNotes && notSearch },\n                    { title: 'Recent changes in subtree', command: \"recentChangesInSubtree\", uiIcon: \"history\", enabled: noSelectedNotes }\n                ] },\n            { title: \"----\" },\n            { title: \"Protect subtree\", command: \"protectSubtree\", uiIcon: \"check-shield\", enabled: noSelectedNotes },\n            { title: \"Unprotect subtree\", command: \"unprotectSubtree\", uiIcon: \"shield\", enabled: noSelectedNotes },\n            { title: \"----\" },\n            { title: 'Copy / clone <kbd data-command=\"copyNotesToClipboard\"></kbd>', command: \"copyNotesToClipboard\", uiIcon: \"copy\",\n                enabled: isNotRoot && !isHoisted },\n            { title: 'Clone to ... <kbd data-command=\"cloneNotesTo\"></kbd>', command: \"cloneNotesTo\", uiIcon: \"empty\",\n                enabled: isNotRoot && !isHoisted },\n            { title: 'Cut <kbd data-command=\"cutNotesToClipboard\"></kbd>', command: \"cutNotesToClipboard\", uiIcon: \"cut\",\n                enabled: isNotRoot && !isHoisted && parentNotSearch },\n            { title: 'Move to ... <kbd data-command=\"moveNotesTo\"></kbd>', command: \"moveNotesTo\", uiIcon: \"empty\",\n                enabled: isNotRoot && !isHoisted && parentNotSearch },\n            { title: 'Paste into <kbd data-command=\"pasteNotesFromClipboard\"></kbd>', command: \"pasteNotesFromClipboard\", uiIcon: \"paste\",\n                enabled: !clipboard.isClipboardEmpty() && notSearch && noSelectedNotes },\n            { title: 'Paste after', command: \"pasteNotesAfterFromClipboard\", uiIcon: \"paste\",\n                enabled: !clipboard.isClipboardEmpty() && isNotRoot && !isHoisted && parentNotSearch && noSelectedNotes },\n            { title: \"Duplicate note here\", command: \"duplicateNote\", uiIcon: \"empty\",\n                enabled: noSelectedNotes && parentNotSearch && isNotRoot && !isHoisted && (!note.isProtected || protectedSessionHolder.isProtectedSessionAvailable()) },\n            { title: \"----\" },\n            { title: \"Export\", command: \"exportNote\", uiIcon: \"empty\",\n                enabled: notSearch && noSelectedNotes },\n            { title: \"Import into note\", command: \"importIntoNote\", uiIcon: \"empty\",\n                enabled: notSearch && noSelectedNotes }\n        ].filter(row => row !== null);\n    }\n\n    async selectMenuItemHandler({command, type}) {\n        const noteId = this.node.data.noteId;\n        const notePath = treeService.getNotePath(this.node);\n\n        if (command === 'openInTab') {\n            appContext.tabManager.openTabWithNote(notePath);\n        }\n        else if (command === \"insertNoteAfter\") {\n            const parentNoteId = this.node.data.parentNoteId;\n            const isProtected = await treeService.getParentProtectedStatus(this.node);\n\n            noteCreateService.createNote(parentNoteId, {\n                target: 'after',\n                targetBranchId: this.node.data.branchId,\n                type: type,\n                isProtected: isProtected\n            });\n        }\n        else if (command === \"insertChildNote\") {\n            noteCreateService.createNote(noteId, {\n                type: type,\n                isProtected: this.node.data.isProtected\n            });\n        }\n        else {\n            this.treeWidget.triggerCommand(command, {node: this.node, notePath: notePath});\n        }\n    }\n}\n\nexport default TreeContextMenu;"],"sourceRoot":""}