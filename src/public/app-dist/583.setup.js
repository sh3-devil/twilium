(window.webpackJsonptrilium=window.webpackJsonptrilium||[]).push([[583],{583:(t,e,n)=>{"use strict";n.r(e),n.d(e,{showDialog:()=>u});var a=n(985),o=n(46),s=n(800),i=n(481),d=n(806),c=n(95),p=n(968);const r=$("#recent-changes-dialog"),l=$("#recent-changes-content");async function u(t){o.Z.openDialog(r),t||(t=p.Z.getHoistedNoteId());const e=await s.Z.get("recent-changes/"+t);await d.Z.getNotes(e.map(t=>t.noteId),!0),l.empty(),0===e.length&&l.append("No changes yet ...");const u=function(t){const e=new Map;for(const n of t){const t=n.date.substr(0,10);e.has(t)||e.set(t,[]),e.get(t).push(n)}return e}(e);for(const[t,e]of u){const o=$("<ul>"),p=$("<div>").append($("<b>").text(t)).append(o);for(const t of e){const e=t.date.substr(11,5);let p;if(t.current_isDeleted){if(p=$("<span>").text(t.current_title),t.canBeUndeleted){const e=$('<a href="javascript:">').text("undelete").on("click",async()=>{const e=await n.e(590).then(n.bind(n,590));await e.confirm("Do you want to undelete this note and its sub-notes?")&&(await s.Z.put(`notes/${t.noteId}/undelete`),r.modal("hide"),await d.Z.reloadNotes([t.noteId]),c.default.tabManager.getActiveTabContext().setNote(t.noteId))});p.append(" (").append(e).append(")")}}else{const e=await d.Z.getNote(t.noteId),n=await i.Z.getSomeNotePath(e);p=n?await a.Z.createNoteLink(n,{title:t.title,showNotePath:!0}):$("<span>").text(e.title)}o.append($("<li>").append($("<span>").text(e).attr("title",t.date)).append(" - ").append(p))}l.append(p)}}}}]);
//# sourceMappingURL=583.setup.js.map