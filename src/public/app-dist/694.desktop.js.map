{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/link_map.js","webpack://trilium/./src/public/app/services/link_map.js"],"names":["$linkMapContainer","$","$dialog","$maxNotesInput","linkMapService","getOptions","maxNotes","val","async","showDialog","css","height","empty","on","note","render","loadNotesAndRelations","linkOverlays","location","id","length","width","foldback","LinkMap","options","this","Object","assign","maxDepth","zoom","stopCheckerCallback","linkMapContainerId","attr","jsPlumb","ready","initJsPlumbInstance","initPanZoom","cleanup","links","noteId","noteIds","Set","map","l","concat","targetNoteId","size","add","notes","Array","from","graph","Springy","Graph","addNodes","addEdges","layout","Layout","ForceDirected","getNoteBox","noteBoxId","noteIdToId","$existingNoteBox","find","n","$noteBox","addClass","prop","title","then","$link","e","tooltip","append","mouseover","mouseout","removeClass","jsPlumbInstance","draggable","start","params","renderer","stop","drag","Renderer","eachNode","node","point","middleW","middleH","p","x","y","hasClass","moveToCenterOfElement","eachEdge","edge","connectionId","source","target","connection","connect","type","canvas","repaintEverything","element","owner","pzInstance","getOwner","center","elemBounds","getBoundingClientRect","containerBounds","centerX","left","centerY","top","transform","getTransform","newX","newY","moveTo","shown","IntersectionObserver","entries","isIntersecting","rootMargin","threshold","observe","panzoom","maxZoom","minZoom","smoothScroll","filterKey","dx","dy","dz","altKey","deleteEveryEndpoint","zoomAbs","getInstance","Endpoint","ConnectionOverlays","PaintStyle","stroke","strokeWidth","HoverPaintStyle","Container","registerConnectionType","anchor","connector","overlays"],"mappings":"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","file":"694.desktop.js","sourcesContent":["import utils from \"../services/utils.js\";\nimport LinkMapService from \"../services/link_map.js\";\nimport appContext from \"../services/app_context.js\";\n\nconst $linkMapContainer = $(\"#link-map-container\");\n\nconst $dialog = $(\"#link-map-dialog\");\nconst $maxNotesInput = $(\"#link-map-max-notes\");\n\nlet linkMapService;\n\nfunction getOptions() {\n    return {\n        maxNotes: $maxNotesInput.val()\n    };\n}\n\nexport async function showDialog() {\n    // set default settings\n    $maxNotesInput.val(20);\n\n    $linkMapContainer.css(\"height\", $(\"body\").height() - 150);\n\n    $linkMapContainer.empty();\n\n    utils.openDialog($dialog);\n}\n\n$dialog.on('shown.bs.modal', () => {\n    const note = appContext.tabManager.getActiveTabNote();\n\n    linkMapService = new LinkMapService(note, $linkMapContainer, getOptions());\n    linkMapService.render();\n});\n\n$maxNotesInput.on(\"input\", () => linkMapService.loadNotesAndRelations(getOptions()));\n","import libraryLoader from \"./library_loader.js\";\nimport server from \"./server.js\";\nimport treeCache from \"./tree_cache.js\";\nimport linkService from \"./link.js\";\n\nconst linkOverlays = [\n    [ \"Arrow\", {\n        location: 1,\n        id: \"arrow\",\n        length: 10,\n        width: 10,\n        foldback: 0.7\n    } ]\n];\n\nexport default class LinkMap {\n    constructor(note, $linkMapContainer, options = {}) {\n        this.note = note;\n        this.options = Object.assign({\n            maxDepth: 10,\n            maxNotes: 30,\n            zoom: 1.0,\n            stopCheckerCallback: () => false\n        }, options);\n\n        this.$linkMapContainer = $linkMapContainer;\n        this.linkMapContainerId = this.$linkMapContainer.attr(\"id\");\n    }\n\n    async render() {\n        await libraryLoader.requireLibrary(libraryLoader.LINK_MAP);\n\n        jsPlumb.ready(() => {\n            if (this.options.stopCheckerCallback()) {\n                return;\n            }\n\n            this.initJsPlumbInstance();\n\n            this.initPanZoom();\n\n            this.loadNotesAndRelations();\n        });\n    }\n\n    async loadNotesAndRelations(options = {}) {\n        this.options = Object.assign(this.options, options);\n\n        this.cleanup();\n\n        if (this.options.stopCheckerCallback()) {\n            return;\n        }\n\n        const links = await server.post(`notes/${this.note.noteId}/link-map`, {\n            maxNotes: this.options.maxNotes,\n            maxDepth: this.options.maxDepth\n        });\n\n        const noteIds = new Set(links.map(l => l.noteId).concat(links.map(l => l.targetNoteId)));\n\n        if (noteIds.size === 0) {\n            noteIds.add(this.note.noteId);\n        }\n\n        // preload all notes\n        const notes = await treeCache.getNotes(Array.from(noteIds), true);\n\n        const graph = new Springy.Graph();\n        graph.addNodes(...noteIds);\n        graph.addEdges(...links.map(l => [l.noteId, l.targetNoteId]));\n\n        const layout = new Springy.Layout.ForceDirected(\n            graph,\n            this.options.stopCheckerCallback,\n            // param explanation here: https://github.com/dhotson/springy/issues/58\n            400.0, // Spring stiffness\n            600.0, // Node repulsion\n            0.15, // Damping\n            0.1 // min energy threshold\n        );\n\n        const getNoteBox = noteId => {\n            const noteBoxId = this.noteIdToId(noteId);\n            const $existingNoteBox = $(\"#\" + noteBoxId);\n\n            if ($existingNoteBox.length > 0) {\n                return $existingNoteBox;\n            }\n\n            const note = notes.find(n => n.noteId === noteId);\n\n            if (!note) {\n                return null;\n            }\n\n            const $noteBox = $(\"<div>\")\n                .addClass(\"note-box\")\n                .prop(\"id\", noteBoxId);\n\n            linkService.createNoteLink(noteId, {title: note.title}).then($link => {\n                $link.on('click', e => {\n                    try {\n                        $link.tooltip('dispose');\n                    }\n                    catch (e) {}\n\n                    linkService.goToLink(e);\n                });\n\n                $noteBox.append($(\"<span>\").addClass(\"title\").append($link));\n            });\n\n            if (noteId === this.note.noteId) {\n                $noteBox.addClass(\"link-map-active-note\");\n            }\n\n            $noteBox\n                .mouseover(() => this.$linkMapContainer.find(\".link-\" + noteId).addClass(\"jsplumb-connection-hover\"))\n                .mouseout(() => this.$linkMapContainer.find(\".link-\" + noteId).removeClass(\"jsplumb-connection-hover\"));\n\n            this.$linkMapContainer.append($noteBox);\n\n            this.jsPlumbInstance.draggable($noteBox[0], {\n                start: params => {\n                    this.renderer.stop();\n                },\n                drag: params => {},\n                stop: params => {}\n            });\n\n            return $noteBox;\n        };\n\n        if (this.options.stopCheckerCallback()) {\n            return;\n        }\n\n        this.renderer = new Springy.Renderer(layout);\n        await this.renderer.start(500);\n\n        layout.eachNode((node, point) => {\n            const $noteBox = getNoteBox(node.id);\n            const middleW = this.$linkMapContainer.width() / 2;\n            const middleH = this.$linkMapContainer.height() / 2;\n\n            $noteBox\n                .css(\"left\", (middleW + point.p.x * 100) + \"px\")\n                .css(\"top\", (middleH + point.p.y * 100) + \"px\");\n\n            if ($noteBox.hasClass(\"link-map-active-note\")) {\n                this.moveToCenterOfElement($noteBox[0]);\n            }\n        });\n\n        layout.eachEdge(edge => {\n            const connectionId = this.linkMapContainerId + '-' + edge.source.id + '-' + edge.target.id;\n\n            if ($(\"#\" + connectionId).length > 0) {\n                return;\n            }\n\n            getNoteBox(edge.source.id);\n            getNoteBox(edge.target.id);\n\n            const connection = this.jsPlumbInstance.connect({\n                source: this.noteIdToId(edge.source.id),\n                target: this.noteIdToId(edge.target.id),\n                type: 'link'\n            });\n\n            if (connection) {\n                $(connection.canvas)\n                    .prop(\"id\", connectionId)\n                    .addClass('link-' + edge.source.id)\n                    .addClass('link-' + edge.target.id);\n            }\n            else {\n                //console.debug(`connection not created for`, edge);\n            }\n        });\n\n        this.jsPlumbInstance.repaintEverything();\n    }\n\n    moveToCenterOfElement(element) {\n        const owner = this.pzInstance.getOwner();\n\n        const center = () => {\n            const elemBounds = element.getBoundingClientRect();\n            const containerBounds = owner.getBoundingClientRect();\n\n            const centerX = -elemBounds.left + containerBounds.left + (containerBounds.width / 2) - (elemBounds.width / 2);\n            const centerY = -elemBounds.top + containerBounds.top + (containerBounds.height / 2) - (elemBounds.height / 2);\n\n            const transform = this.pzInstance.getTransform();\n\n            const newX = transform.x + centerX;\n            const newY = transform.y + centerY;\n\n            this.pzInstance.moveTo(newX, newY);\n        };\n\n        let shown = false;\n\n        const observer = new IntersectionObserver(entries => {\n            if (!shown && entries[0].isIntersecting) {\n                shown = true;\n                center();\n            }\n        }, {\n            rootMargin: '0px',\n            threshold: 0.1\n        });\n\n        observer.observe(owner);\n    }\n\n    initPanZoom() {\n        if (this.pzInstance) {\n            return;\n        }\n\n        this.pzInstance = panzoom(this.$linkMapContainer[0], {\n            maxZoom: 2,\n            minZoom: 0.3,\n            smoothScroll: false,\n            filterKey: function (e, dx, dy, dz) {\n                // if ALT is pressed then panzoom should bubble the event up\n                // this is to preserve ALT-LEFT, ALT-RIGHT navigation working\n                return e.altKey;\n            }\n        });\n    }\n\n    cleanup() {\n        if (this.renderer) {\n            this.renderer.stop();\n        }\n\n        if (this.jsPlumbInstance) {\n            // delete all endpoints and connections\n            // this is done at this point (after async operations) to reduce flicker to the minimum\n            this.jsPlumbInstance.deleteEveryEndpoint();\n\n            // without this we still end up with note boxes remaining in the canvas\n            this.$linkMapContainer.empty();\n\n            // reset zoom/pan\n            this.pzInstance.zoomAbs(0, 0, this.options.zoom);\n            this.pzInstance.moveTo(0, 0);\n        }\n    }\n\n    initJsPlumbInstance() {\n        if (this.jsPlumbInstance) {\n            this.cleanup();\n\n            return;\n        }\n\n        this.jsPlumbInstance = jsPlumb.getInstance({\n            Endpoint: [\"Blank\", {}],\n            ConnectionOverlays: linkOverlays,\n            PaintStyle: { stroke: \"var(--muted-text-color)\", strokeWidth: 1 },\n            HoverPaintStyle: { stroke: \"var(--main-text-color)\", strokeWidth: 1 },\n            Container: this.$linkMapContainer.attr(\"id\")\n        });\n\n        this.jsPlumbInstance.registerConnectionType(\"link\", { anchor: \"Continuous\", connector: \"Straight\", overlays: linkOverlays });\n    }\n\n    noteIdToId(noteId) {\n        return this.linkMapContainerId + \"-note-\" + noteId;\n    }\n}"],"sourceRoot":""}