{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/clone_to.js"],"names":["$dialog","$","$form","$noteAutoComplete","$clonePrefix","$noteList","clonedNoteIds","async","showDialog","noteIds","noteId","includes","push","val","trigger","empty","note","append","text","title","on","notePath","getSelectedPath","modal","parentNoteId","targetBranchId","cloneNoteId","clonedNote","targetNote","getNote","cloneNotesTo","console","error"],"mappings":"sMAOA,MAAMA,EAAUC,EAAE,oBACZC,EAAQD,EAAE,kBACVE,EAAoBF,EAAE,+BACtBG,EAAeH,EAAE,iBACjBI,EAAYJ,EAAE,uBAEpB,IAAIK,EAEGC,eAAeC,EAAWC,GAC7BH,EAAgB,GAEhB,IAAK,MAAMI,KAAUD,EACZH,EAAcK,SAASD,IACxBJ,EAAcM,KAAKF,GAI3B,eAAiBV,GAEjBG,EAAkBU,IAAI,IAAIC,QAAQ,SAElCT,EAAUU,QAEV,IAAK,MAAML,KAAUJ,EAAe,CAChC,MAAMU,QAAa,YAAkBN,GAErCL,EAAUY,OAAOhB,EAAE,QAAQiB,KAAKF,EAAKG,QAGzC,yBAA6ChB,GAC7C,oBAAwCA,GAiB5CD,EAAMkB,GAAG,SAAU,KACf,MAAMC,EAAWlB,EAAkBmB,kBAWnC,OATID,GACArB,EAAQuB,MAAM,QAlBtBhB,eAA4Bc,GACxB,MAAM,OAACX,EAAM,aAAEc,GAAgB,qCAA6CH,GACtEI,QAAuB,gBAAsBD,EAAcd,GAEjE,IAAK,MAAMgB,KAAepB,EAAe,OAC/B,gBAA0BoB,EAAaD,EAAgBrB,EAAaS,OAE1E,MAAMc,QAAmB,YAAkBD,GACrCE,QAAmB,cAAoBH,GAAgBI,UAE7D,sBAAyB,SAASF,EAAWR,+BAA+BS,EAAWT,UAUvFW,CAAaT,IAGbU,QAAQC,MAAM,yBAGX","file":"365.mobile.js","sourcesContent":["import noteAutocompleteService from \"../services/note_autocomplete.js\";\nimport utils from \"../services/utils.js\";\nimport treeService from \"../services/tree.js\";\nimport toastService from \"../services/toast.js\";\nimport treeCache from \"../services/tree_cache.js\";\nimport branchService from \"../services/branches.js\";\n\nconst $dialog = $(\"#clone-to-dialog\");\nconst $form = $(\"#clone-to-form\");\nconst $noteAutoComplete = $(\"#clone-to-note-autocomplete\");\nconst $clonePrefix = $(\"#clone-prefix\");\nconst $noteList = $(\"#clone-to-note-list\");\n\nlet clonedNoteIds;\n\nexport async function showDialog(noteIds) {\n    clonedNoteIds = [];\n\n    for (const noteId of noteIds) {\n        if (!clonedNoteIds.includes(noteId)) {\n            clonedNoteIds.push(noteId);\n        }\n    }\n\n    utils.openDialog($dialog);\n\n    $noteAutoComplete.val('').trigger('focus');\n\n    $noteList.empty();\n\n    for (const noteId of clonedNoteIds) {\n        const note = await treeCache.getNote(noteId);\n\n        $noteList.append($(\"<li>\").text(note.title));\n    }\n\n    noteAutocompleteService.initNoteAutocomplete($noteAutoComplete);\n    noteAutocompleteService.showRecentNotes($noteAutoComplete);\n}\n\nasync function cloneNotesTo(notePath) {\n    const {noteId, parentNoteId} = treeService.getNoteIdAndParentIdFromNotePath(notePath);\n    const targetBranchId = await treeCache.getBranchId(parentNoteId, noteId);\n\n    for (const cloneNoteId of clonedNoteIds) {\n        await branchService.cloneNoteTo(cloneNoteId, targetBranchId, $clonePrefix.val());\n\n        const clonedNote = await treeCache.getNote(cloneNoteId);\n        const targetNote = await treeCache.getBranch(targetBranchId).getNote();\n\n        toastService.showMessage(`Note \"${clonedNote.title}\" has been cloned into ${targetNote.title}`);\n    }\n}\n\n$form.on('submit', () => {\n    const notePath = $noteAutoComplete.getSelectedPath();\n\n    if (notePath) {\n        $dialog.modal('hide');\n\n        cloneNotesTo(notePath);\n    }\n    else {\n        console.error(\"No path to clone to.\");\n    }\n\n    return false;\n});\n"],"sourceRoot":""}