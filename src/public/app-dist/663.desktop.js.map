{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/export.js"],"names":["$dialog","$","$form","$noteTitle","find","$subtreeFormats","$singleFormats","$subtreeType","$singleType","$exportButton","$opmlVersions","taskId","branchId","async","showDialog","notePath","defaultType","removeAttr","prop","trigger","Error","noteId","parentNoteId","noteTitle","html","makeToast","id","message","title","icon","on","modal","exportType","val","alert","exportFormat","exportVersion","type","format","version","url","exportBranch","this","value","length","slideDown","slideUp","taskType","progressCount","toast","closeAfter"],"mappings":"4LAMA,MAAMA,EAAUC,EAAE,kBACZC,EAAQD,EAAE,gBACVE,EAAaH,EAAQI,KAAK,sBAC1BC,EAAkBJ,EAAE,2BACpBK,EAAiBL,EAAE,0BACnBM,EAAeN,EAAE,wBACjBO,EAAcP,EAAE,uBAChBQ,EAAgBR,EAAE,kBAClBS,EAAgBT,EAAE,kBAExB,IAAIU,EAAS,GACTC,EAAW,KAERC,eAAeC,EAAWC,EAAUC,GAKvC,GAHAL,EAAS,GACTF,EAAcQ,WAAW,YAEL,YAAhBD,EACAT,EAAaW,KAAK,WAAW,GAAMC,QAAQ,UAG3ClB,EAAE,6CAA6CkB,QAAQ,cAEtD,IAAoB,WAAhBH,EAIL,MAAM,IAAII,MAAM,qBAAuBJ,GAHvCR,EAAYU,KAAK,WAAW,GAAMC,QAAQ,UAM9ClB,EAAE,YAAYiB,KAAK,WAAW,GAE9B,eAAiBlB,GAEjB,MAAM,OAACqB,EAAM,aAAEC,GAAgB,qCAA6CP,GAE5EH,QAAiB,gBAAsBU,EAAcD,GAErD,MAAME,QAAkB,iBAAyBF,GAEjDlB,EAAWqB,KAAKD,GA6DpB,SAASE,EAAUC,EAAIC,GACnB,MAAO,CACHD,GAAIA,EACJE,MAAO,gBACPD,QAASA,EACTE,KAAM,yBA/Dd3B,EAAM4B,GAAG,SAAU,KACf9B,EAAQ+B,MAAM,QAEd,MAAMC,EAAahC,EAAQI,KAAK,qCAAqC6B,MAErE,IAAKD,EAGD,YADAE,MAAM,mCAIV,MAAMC,EAA8B,YAAfH,EACf/B,EAAE,6CAA6CgC,MAC/ChC,EAAE,4CAA4CgC,MAE9CG,EAAiC,SAAjBD,EAA0BnC,EAAQI,KAAK,sCAAsC6B,MAAQ,MAI3G,OAGJ,SAAsBrB,EAAUyB,EAAMC,EAAQC,GAC1C5B,EAAS,iBAAmB,IAE5B,MAAM6B,EAAM,sBAAwB,aAAa5B,YAAmByB,KAAQC,KAAUC,KAAW5B,KAEjG,aAAe6B,GAVfC,CAAa7B,EAAUoB,EAAYG,EAAcC,IAE1C,IAWXnC,EAAE,2BAA2B6B,GAAG,UAAU,WACnB,YAAfY,KAAKC,OACyD,IAA1D1C,EAAE,6CAA6C2C,QAC/C3C,EAAE,2CAA2CiB,KAAK,WAAW,GAGjEb,EAAgBwC,YAChBvC,EAAewC,YAG8C,IAAzD7C,EAAE,4CAA4C2C,QAC9C3C,EAAE,0CAA0CiB,KAAK,WAAW,GAGhEb,EAAgByC,UAChBxC,EAAeuC,gBAIvB5C,EAAE,qCAAqC6B,GAAG,UAAU,WAC7B,SAAfY,KAAKC,MACLjC,EAAcmC,YAGdnC,EAAcoC,aAatB,wBAAuBjC,UACnB,GAAyB,WAArBc,EAAQoB,SAIZ,GAAqB,eAAjBpB,EAAQU,KACR,0BAA6BV,EAAQhB,QACrC,oBAAuBgB,EAAQA,cAE9B,GAAqB,wBAAjBA,EAAQU,KACb,yBAA4BZ,EAAUE,EAAQhB,OAAQ,uBAAyBgB,EAAQqB,qBAEtF,GAAqB,mBAAjBrB,EAAQU,KAA2B,CACxC,MAAMY,EAAQxB,EAAUE,EAAQhB,OAAQ,iCACxCsC,EAAMC,WAAa,IAEnB,yBAA4BD","file":"663.desktop.js","sourcesContent":["import treeService from \"../services/tree.js\";\nimport utils from \"../services/utils.js\";\nimport ws from \"../services/ws.js\";\nimport toastService from \"../services/toast.js\";\nimport treeCache from \"../services/tree_cache.js\";\n\nconst $dialog = $(\"#export-dialog\");\nconst $form = $(\"#export-form\");\nconst $noteTitle = $dialog.find(\".export-note-title\");\nconst $subtreeFormats = $(\"#export-subtree-formats\");\nconst $singleFormats = $(\"#export-single-formats\");\nconst $subtreeType = $(\"#export-type-subtree\");\nconst $singleType = $(\"#export-type-single\");\nconst $exportButton = $(\"#export-button\");\nconst $opmlVersions = $(\"#opml-versions\");\n\nlet taskId = '';\nlet branchId = null;\n\nexport async function showDialog(notePath, defaultType) {\n    // each opening of the dialog resets the taskId so we don't associate it with previous exports anymore\n    taskId = '';\n    $exportButton.removeAttr(\"disabled\");\n\n    if (defaultType === 'subtree') {\n        $subtreeType.prop(\"checked\", true).trigger('change');\n\n        // to show/hide OPML versions\n        $(\"input[name=export-subtree-format]:checked\").trigger('change');\n    }\n    else if (defaultType === 'single') {\n        $singleType.prop(\"checked\", true).trigger('change');\n    }\n    else {\n        throw new Error(\"Unrecognized type \" + defaultType);\n    }\n\n    $(\"#opml-v2\").prop(\"checked\", true); // setting default\n\n    utils.openDialog($dialog);\n\n    const {noteId, parentNoteId} = treeService.getNoteIdAndParentIdFromNotePath(notePath);\n\n    branchId = await treeCache.getBranchId(parentNoteId, noteId);\n\n    const noteTitle = await treeService.getNoteTitle(noteId);\n\n    $noteTitle.html(noteTitle);\n}\n\n$form.on('submit', () => {\n    $dialog.modal('hide');\n\n    const exportType = $dialog.find(\"input[name='export-type']:checked\").val();\n\n    if (!exportType) {\n        // this shouldn't happen as we always choose default export type\n        alert(\"Choose export type first please\");\n        return;\n    }\n\n    const exportFormat = exportType === 'subtree'\n        ? $(\"input[name=export-subtree-format]:checked\").val()\n        : $(\"input[name=export-single-format]:checked\").val();\n\n    const exportVersion = exportFormat === 'opml' ? $dialog.find(\"input[name='opml-version']:checked\").val() : \"1.0\";\n\n    exportBranch(branchId, exportType, exportFormat, exportVersion);\n\n    return false;\n});\n\nfunction exportBranch(branchId, type, format, version) {\n    taskId = utils.randomString(10);\n\n    const url = utils.getUrlForDownload(`api/notes/${branchId}/export/${type}/${format}/${version}/${taskId}`);\n\n    utils.download(url);\n}\n\n$('input[name=export-type]').on('change', function () {\n    if (this.value === 'subtree') {\n        if ($(\"input[name=export-subtree-format]:checked\").length === 0) {\n            $(\"input[name=export-subtree-format]:first\").prop(\"checked\", true);\n        }\n\n        $subtreeFormats.slideDown();\n        $singleFormats.slideUp();\n    }\n    else {\n        if ($(\"input[name=export-single-format]:checked\").length === 0) {\n            $(\"input[name=export-single-format]:first\").prop(\"checked\", true);\n        }\n\n        $subtreeFormats.slideUp();\n        $singleFormats.slideDown();\n    }\n});\n\n$('input[name=export-subtree-format]').on('change', function () {\n    if (this.value === 'opml') {\n        $opmlVersions.slideDown();\n    }\n    else {\n        $opmlVersions.slideUp();\n    }\n});\n\nfunction makeToast(id, message) {\n    return {\n        id: id,\n        title: \"Export status\",\n        message: message,\n        icon: \"arrow-square-up-right\"\n    };\n}\n\nws.subscribeToMessages(async message => {\n    if (message.taskType !== 'export') {\n        return;\n    }\n\n    if (message.type === 'task-error') {\n        toastService.closePersistent(message.taskId);\n        toastService.showError(message.message);\n    }\n    else if (message.type === 'task-progress-count') {\n        toastService.showPersistent(makeToast(message.taskId, \"Export in progress: \" + message.progressCount));\n    }\n    else if (message.type === 'task-succeeded') {\n        const toast = makeToast(message.taskId, \"Import finished successfully.\");\n        toast.closeAfter = 5000;\n\n        toastService.showPersistent(toast);\n    }\n});"],"sourceRoot":""}