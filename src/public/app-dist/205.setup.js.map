{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/sql_console.js","webpack://trilium/./src/public/app/services/library_loader.js"],"names":["$dialog","$","$query","$executeButton","$tableSchemas","$resultContainer","codeEditor","async","showDialog","tables","empty","table","$tableLink","text","name","$columns","column","columns","append","type","tooltip","html","placement","boundary","title","outerHTML","on","setValue","showTableSchemas","execute","sqlQuery","getSelection","getValue","result","query","success","error","results","rows","length","$table","$row","key","e","CodeMirror","keyMap","default","basic","modeURL","value","viewportMargin","Infinity","indentUnit","highlightSelectionMatches","showToken","annotateScrollbar","setOption","autoLoadMode","focus","initEditor","loadedScriptPromises","requireScript","url","ajax","dataType","cache","requireCss","Array","from","document","querySelectorAll","map","el","href","some","l","endsWith","attr","requireLibrary","library","css","cssUrl","js","scriptUrl","CKEDITOR","CODE_MIRROR","ESLINT","COMMONMARK","RELATION_MAP","LINK_MAP","PRINT_THIS","KNOCKOUT","CALENDAR_WIDGET"],"mappings":"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","file":"205.setup.js","sourcesContent":["import libraryLoader from '../services/library_loader.js';\nimport server from '../services/server.js';\nimport toastService from \"../services/toast.js\";\nimport utils from \"../services/utils.js\";\n\nconst $dialog = $(\"#sql-console-dialog\");\nconst $query = $('#sql-console-query');\nconst $executeButton = $('#sql-console-execute');\nconst $tableSchemas = $(\"#sql-console-table-schemas\");\nconst $resultContainer = $(\"#result-container\");\n\nlet codeEditor;\n\n$dialog.on(\"shown.bs.modal\", e => initEditor());\n\nexport async function showDialog() {\n    await showTableSchemas();\n\n    utils.openDialog($dialog);\n}\n\nasync function initEditor() {\n    if (!codeEditor) {\n        await libraryLoader.requireLibrary(libraryLoader.CODE_MIRROR);\n\n        CodeMirror.keyMap.default[\"Shift-Tab\"] = \"indentLess\";\n        CodeMirror.keyMap.default[\"Tab\"] = \"indentMore\";\n\n        // removing Escape binding so that Escape will propagate to the dialog (which will close on escape)\n        delete CodeMirror.keyMap.basic[\"Esc\"];\n\n        CodeMirror.modeURL = 'libraries/codemirror/mode/%N/%N.js';\n\n        codeEditor = CodeMirror($query[0], {\n            value: \"\",\n            viewportMargin: Infinity,\n            indentUnit: 4,\n            highlightSelectionMatches: {showToken: /\\w/, annotateScrollbar: false}\n        });\n\n        codeEditor.setOption(\"mode\", \"text/x-sqlite\");\n        CodeMirror.autoLoadMode(codeEditor, \"sql\");\n\n        codeEditor.setValue(`SELECT title, isProtected, type, mime FROM notes WHERE noteId = 'root';\n---\nSELECT noteId, parentNoteId, notePosition, prefix FROM branches WHERE branchId = 'root';`);\n    }\n\n    codeEditor.focus();\n}\n\nasync function execute() {\n    // execute the selected text or the whole content if there's no selection\n    let sqlQuery = codeEditor.getSelection();\n\n    if (!sqlQuery) {\n        sqlQuery = codeEditor.getValue();\n    }\n\n    const result = await server.post(\"sql/execute\", {\n        query: sqlQuery\n    });\n\n    if (!result.success) {\n        toastService.showError(result.error);\n        return;\n    }\n    else {\n        toastService.showMessage(\"Query was executed successfully.\");\n    }\n\n    const results = result.results;\n\n    $resultContainer.empty();\n\n    for (const rows of results) {\n        if (rows.length === 0) {\n            continue;\n        }\n\n        const $table = $('<table class=\"table table-striped\">');\n        $resultContainer.append($table);\n\n        const result = rows[0];\n        const $row = $(\"<tr>\");\n\n        for (const key in result) {\n            $row.append($(\"<th>\").html(key));\n        }\n\n        $table.append($row);\n\n        for (const result of rows) {\n            const $row = $(\"<tr>\");\n\n            for (const key in result) {\n                $row.append($(\"<td>\").html(result[key]));\n            }\n\n            $table.append($row);\n        }\n    }\n}\n\nasync function showTableSchemas() {\n    const tables = await server.get('sql/schema');\n\n    $tableSchemas.empty();\n\n    for (const table of tables) {\n        const $tableLink = $('<button class=\"btn\">').text(table.name);\n\n        const $columns = $(\"<ul>\");\n\n        for (const column of table.columns) {\n            $columns.append(\n                $(\"<li>\")\n                    .append($(\"<span>\").text(column.name))\n                    .append($(\"<span>\").text(column.type))\n            );\n        }\n\n        $tableSchemas.append($tableLink).append(\" \");\n\n        $tableLink\n            .tooltip({\n                html: true,\n                placement: 'bottom',\n                boundary: 'window',\n                title: $columns[0].outerHTML\n            })\n            .on('click', () => codeEditor.setValue(\"SELECT * FROM \" + table.name + \" LIMIT 100\"));\n    }\n}\n\nutils.bindElShortcut($query, 'ctrl+return', execute);\n\n$executeButton.on('click', execute);\n","const CKEDITOR = {\"js\": [\"libraries/ckeditor/ckeditor.js\"]};\n\nconst CODE_MIRROR = {\n    js: [\n        \"libraries/codemirror/codemirror.js\",\n        \"libraries/codemirror/addon/mode/loadmode.js\",\n        \"libraries/codemirror/addon/fold/xml-fold.js\",\n        \"libraries/codemirror/addon/edit/matchbrackets.js\",\n        \"libraries/codemirror/addon/edit/matchtags.js\",\n        \"libraries/codemirror/addon/search/match-highlighter.js\",\n        \"libraries/codemirror/mode/meta.js\",\n        \"libraries/codemirror/addon/lint/lint.js\",\n        \"libraries/codemirror/addon/lint/eslint.js\"\n    ],\n    css: [\n        \"libraries/codemirror/codemirror.css\",\n        \"libraries/codemirror/addon/lint/lint.css\"\n    ]\n};\n\nconst ESLINT = {js: [\"libraries/eslint.js\"]};\n\nconst COMMONMARK = {js: [\"libraries/commonmark.min.js\"]};\n\nconst RELATION_MAP = {\n    js: [\n        \"libraries/jsplumb.js\",\n        \"libraries/panzoom.js\"\n    ],\n    css: [\n        \"stylesheets/relation_map.css\"\n    ]\n};\n\nconst LINK_MAP = {\n    js: [\n        \"libraries/jsplumb.js\",\n        \"libraries/panzoom.js\",\n        \"libraries/springy.js\"\n    ],\n    css: [\n        \"stylesheets/link_map.css\"\n    ]\n};\n\nconst PRINT_THIS = {js: [\"libraries/printThis.js\"]};\n\nconst KNOCKOUT = {js: [\"libraries/knockout.min.js\"]};\n\nconst CALENDAR_WIDGET = {css: [\"stylesheets/calendar.css\"]};\n\nasync function requireLibrary(library) {\n    if (library.css) {\n        library.css.map(cssUrl => requireCss(cssUrl));\n    }\n\n    if (library.js) {\n        for (const scriptUrl of library.js) {\n            await requireScript(scriptUrl);\n        }\n    }\n}\n\n// we save the promises in case of the same script being required concurrently multiple times\nconst loadedScriptPromises = {};\n\nasync function requireScript(url) {\n    if (!loadedScriptPromises[url]) {\n        loadedScriptPromises[url] = $.ajax({\n            url: url,\n            dataType: \"script\",\n            cache: true\n        });\n    }\n\n    await loadedScriptPromises[url];\n}\n\nasync function requireCss(url) {\n    const cssLinks = Array\n        .from(document.querySelectorAll('link'))\n        .map(el => el.href);\n\n    if (!cssLinks.some(l => l.endsWith(url))) {\n        $('head').append($('<link rel=\"stylesheet\" type=\"text/css\" />').attr('href', url));\n    }\n}\n\nexport default {\n    requireCss,\n    requireLibrary,\n    CKEDITOR,\n    CODE_MIRROR,\n    ESLINT,\n    COMMONMARK,\n    RELATION_MAP,\n    LINK_MAP,\n    PRINT_THIS,\n    KNOCKOUT,\n    CALENDAR_WIDGET\n}"],"sourceRoot":""}