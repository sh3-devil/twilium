{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/jump_to_note.js","webpack://trilium/./src/public/app/services/note_autocomplete.js"],"names":["$dialog","$","$autoComplete","async","showDialog","val","hideGoToSelectedNoteButton","on","event","suggestion","dataset","path","setNote","showInFullText","e","preventDefault","stopPropagation","searchText","searchNotesService","resetSearch","showSearch","doSearch","modal","autocompleteSource","term","cb","result","encodeURIComponent","length","push","pathTitle","clearText","$el","setSelectedPath","autocomplete","trigger","showRecentNotes","initNoteAutocomplete","options","hasClass","addClass","$clearTextButton","prop","$showRecentNotesButton","$goToSelectedNoteButton","attr","$sideButtons","append","after","appendTo","document","querySelector","hint","autoselect","openOnFocus","minLength","tabAutocomplete","source","displayKey","templates","highlightedTitle","cache","trim","init","fn","getSelectedPath","this","closest","find","toggleClass"],"mappings":"kKAIA,MAAMA,EAAUC,EAAE,wBACZC,EAAgBD,EAAE,8BAGjBE,eAAeC,IAClBF,EAAcG,IAAI,IAElB,eAAiBL,GAEjB,yBAA6CE,EAAe,CAAEI,4BAA4B,IACrFC,GAAG,yBAAyB,SAASC,EAAOC,EAAYC,GACrD,IAAKD,EAAWE,KACZ,OAAO,EAGX,2CAA4CC,QAAQH,EAAWE,SAGvE,oBAAwCT,GAG5C,SAASW,EAAeC,GAEpBA,EAAEC,iBACFD,EAAEE,kBAEF,MAAMC,EAAaf,EAAcG,MAEjCa,mBAAmBC,cACnBD,mBAAmBE,aACnBF,mBAAmBG,SAASJ,GAE5BjB,EAAQsB,MAAM,QA9BYrB,EAAE,6BAkCVM,GAAG,QAASM,GAElC,mBAAqBb,EAAS,cAAea,I,yECnC7CV,eAAeoB,EAAmBC,EAAMC,GACpC,MAAMC,QAAe,QAAW,sBACdC,mBAAmBH,GAC/B,iBAAmB,2CAEH,IAAlBE,EAAOE,QACPF,EAAOG,KAAK,CACRC,UAAW,aACXnB,KAAM,KAIdc,EAAGC,GAGP,SAASK,EAAUC,GACX,iBAIJA,EAAIC,gBAAgB,IACpBD,EAAIE,aAAa,MAAO,IAAIC,QAAQ,WAGxC,SAASC,EAAgBJ,GACjB,iBAIJA,EAAIC,gBAAgB,IACpBD,EAAIE,aAAa,MAAO,IACxBF,EAAIG,QAAQ,UAkGhB,SACIZ,qBACAc,qBAjGJ,SAA8BL,EAAKM,GAC/B,GAAIN,EAAIO,SAAS,4BAA8B,eAC3C,OAAOP,EAGXM,EAAUA,GAAW,GAErBN,EAAIQ,SAAS,2BAEb,MAAMC,EAAmBxC,EAAE,OAClBuC,SAAS,iDACTE,KAAK,QAAS,oBAEjBC,EAAyB1C,EAAE,OACxBuC,SAAS,wDACTE,KAAK,QAAS,qBAEjBE,EAA0B3C,EAAE,OAC7BuC,SAAS,oEACTK,KAAK,cAAe,QAEnBC,EAAe7C,EAAE,SAClBuC,SAAS,sBACTO,OAAON,GACPM,OAAOJ,GA8CZ,OA5CKL,EAAQhC,4BACTwC,EAAaC,OAAOH,GAGxBZ,EAAIgB,MAAMF,GAEVL,EAAiBlC,GAAG,QAAS,IAAMwB,EAAUC,IAE7CW,EAAuBpC,GAAG,QAASO,IAC/BsB,EAAgBJ,IAIT,IAGXA,EAAIE,aAAa,CACbe,SAAUC,SAASC,cAAc,QACjCC,MAAM,EACNC,YAAY,EACZC,aAAa,EACbC,UAAW,EACXC,iBAAiB,GAClB,CACC,CACIC,OAAQlC,EACRmC,WAAY,YACZC,UAAW,CACPlD,WAAY,SAASA,GACjB,OAAOA,EAAWmD,mBAI1BC,OAAO,KAIf7B,EAAIzB,GAAG,wBAAyB,CAACC,EAAOC,IAAeuB,EAAIC,gBAAgBxB,EAAWE,OACtFqB,EAAIzB,GAAG,sBAAuB,KACrByB,EAAI3B,MAAMyD,QACX/B,EAAUC,KAIXA,GA4BPI,kBACA2B,KA1BJ,WACI9D,EAAE+D,GAAGC,gBAAkB,WACnB,OAAKhE,EAAEiE,MAAM7D,MAAMyD,OAGR7D,EAAEiE,MAAMrB,KAlHD,kBAgHP,IAMf5C,EAAE+D,GAAG/B,gBAAkB,SAAUtB,GAC7BA,EAAOA,GAAQ,GAEfV,EAAEiE,MAAMrB,KAzHU,iBAyHclC,GAEhCV,EAAEiE,MACGC,QAAQ,gBACRC,KAAK,+BACLC,YAAY,YAAa1D,EAAKmD,QAC9BjB,KA/Ha,iBA+HWlC","file":"667.setup.js","sourcesContent":["import noteAutocompleteService from '../services/note_autocomplete.js';\nimport utils from \"../services/utils.js\";\nimport appContext from \"../services/app_context.js\";\n\nconst $dialog = $(\"#jump-to-note-dialog\");\nconst $autoComplete = $(\"#jump-to-note-autocomplete\");\nconst $showInFullTextButton = $(\"#show-in-full-text-button\");\n\nexport async function showDialog() {\n    $autoComplete.val('');\n\n    utils.openDialog($dialog);\n\n    noteAutocompleteService.initNoteAutocomplete($autoComplete, { hideGoToSelectedNoteButton: true })\n        .on('autocomplete:selected', function(event, suggestion, dataset) {\n            if (!suggestion.path) {\n                return false;\n            }\n\n            appContext.tabManager.getActiveTabContext().setNote(suggestion.path);\n        });\n\n    noteAutocompleteService.showRecentNotes($autoComplete);\n}\n\nfunction showInFullText(e) {\n    // stop from propagating upwards (dangerous especially with ctrl+enter executable javascript notes)\n    e.preventDefault();\n    e.stopPropagation();\n\n    const searchText = $autoComplete.val();\n\n    searchNotesService.resetSearch();\n    searchNotesService.showSearch();\n    searchNotesService.doSearch(searchText);\n\n    $dialog.modal('hide');\n}\n\n\n$showInFullTextButton.on('click', showInFullText);\n\nutils.bindElShortcut($dialog, 'ctrl+return', showInFullText);\n","import server from \"./server.js\";\nimport appContext from \"./app_context.js\";\nimport utils from './utils.js';\n\n// this key needs to have this value so it's hit by the tooltip\nconst SELECTED_PATH_KEY = \"data-note-path\";\n\nasync function autocompleteSource(term, cb) {\n    const result = await server.get('autocomplete'\n        + '?query=' + encodeURIComponent(term)\n        + '&activeNoteId=' + appContext.tabManager.getActiveTabNoteId());\n\n    if (result.length === 0) {\n        result.push({\n            pathTitle: \"No results\",\n            path: \"\"\n        });\n    }\n\n    cb(result);\n}\n\nfunction clearText($el) {\n    if (utils.isMobile()) {\n        return;\n    }\n\n    $el.setSelectedPath(\"\");\n    $el.autocomplete(\"val\", \"\").trigger('change');\n}\n\nfunction showRecentNotes($el) {\n    if (utils.isMobile()) {\n        return;\n    }\n\n    $el.setSelectedPath(\"\");\n    $el.autocomplete(\"val\", \"\");\n    $el.trigger('focus');\n}\n\nfunction initNoteAutocomplete($el, options) {\n    if ($el.hasClass(\"note-autocomplete-input\") || utils.isMobile()) {\n        return $el;\n    }\n\n    options = options || {};\n\n    $el.addClass(\"note-autocomplete-input\");\n\n    const $clearTextButton = $(\"<a>\")\n            .addClass(\"input-group-text input-clearer-button bx bx-x\")\n            .prop(\"title\", \"Clear text field\");\n\n    const $showRecentNotesButton = $(\"<a>\")\n            .addClass(\"input-group-text show-recent-notes-button bx bx-time\")\n            .prop(\"title\", \"Show recent notes\");\n\n    const $goToSelectedNoteButton = $(\"<a>\")\n        .addClass(\"input-group-text go-to-selected-note-button bx bx-arrow-to-right\")\n        .attr(\"data-action\", \"note\");\n\n    const $sideButtons = $(\"<div>\")\n        .addClass(\"input-group-append\")\n        .append($clearTextButton)\n        .append($showRecentNotesButton);\n\n    if (!options.hideGoToSelectedNoteButton) {\n        $sideButtons.append($goToSelectedNoteButton);\n    }\n\n    $el.after($sideButtons);\n\n    $clearTextButton.on('click', () => clearText($el));\n\n    $showRecentNotesButton.on('click', e => {\n        showRecentNotes($el);\n\n        // this will cause the click not give focus to the \"show recent notes\" button\n        // this is important because otherwise input will lose focus immediatelly and not show the results\n        return false;\n    });\n\n    $el.autocomplete({\n        appendTo: document.querySelector('body'),\n        hint: false,\n        autoselect: true,\n        openOnFocus: true,\n        minLength: 0,\n        tabAutocomplete: false\n    }, [\n        {\n            source: autocompleteSource,\n            displayKey: 'pathTitle',\n            templates: {\n                suggestion: function(suggestion) {\n                    return suggestion.highlightedTitle;\n                }\n            },\n            // we can't cache identical searches because notes can be created / renamed, new recent notes can be added\n            cache: false\n        }\n    ]);\n\n    $el.on('autocomplete:selected', (event, suggestion) => $el.setSelectedPath(suggestion.path));\n    $el.on('autocomplete:closed', () => {\n        if (!$el.val().trim()) {\n            clearText($el);\n        }\n    });\n\n    return $el;\n}\n\nfunction init() {\n    $.fn.getSelectedPath = function () {\n        if (!$(this).val().trim()) {\n            return \"\";\n        } else {\n            return $(this).attr(SELECTED_PATH_KEY);\n        }\n    };\n\n    $.fn.setSelectedPath = function (path) {\n        path = path || \"\";\n\n        $(this).attr(SELECTED_PATH_KEY, path);\n\n        $(this)\n            .closest(\".input-group\")\n            .find(\".go-to-selected-note-button\")\n            .toggleClass(\"disabled\", !path.trim())\n            .attr(SELECTED_PATH_KEY, path); // we also set attr here so tooltip can be displayed\n    };\n}\n\nexport default {\n    autocompleteSource,\n    initNoteAutocomplete,\n    showRecentNotes,\n    init\n}"],"sourceRoot":""}