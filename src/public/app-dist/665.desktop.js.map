{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/markdown_import.js"],"names":["$dialog","$","$importTextarea","async","convertMarkdownToHtml","text","reader","commonmark","Parser","writer","HtmlRenderer","parsed","parse","result","render","callback","textEditor","viewFragment","data","processor","toView","modelFragment","toModel","model","insertContent","document","selection","importMarkdownInline","clipboard","readText","sendForm","val","modal","on","trigger"],"mappings":"4LAKA,MAAMA,EAAUC,EAAE,2BACZC,EAAkBD,EAAE,6BAG1BE,eAAeC,EAAsBC,SAC3B,mBAA6B,gBAEnC,MAAMC,EAAS,IAAIC,WAAWC,OACxBC,EAAS,IAAIF,WAAWG,aACxBC,EAASL,EAAOM,MAAMP,GAEtBQ,EAASJ,EAAOK,OAAOH,GAE7B,yBAA0B,wBAAyB,CAC/CI,SAAUC,IACN,MAAMC,EAAeD,EAAWE,KAAKC,UAAUC,OAAOP,GAChDQ,EAAgBL,EAAWE,KAAKI,QAAQL,GAE9CD,EAAWO,MAAMC,cAAcH,EAAeL,EAAWO,MAAME,SAASC,WAExE,sBAAyB,4DAK9BvB,eAAewB,IAClB,GAAqD,SAAjD,4CAIJ,GAAI,iBAAoB,CACpB,MAAM,UAACC,GAAa,mBAAqB,YAGzCxB,EAFawB,EAAUC,iBAKvB,eAAiB7B,GAIzBG,eAAe2B,IACX,MAAMzB,EAAOH,EAAgB6B,MAE7B/B,EAAQgC,MAAM,cAER5B,EAAsBC,GAE5BH,EAAgB6B,IAAI,IA9CF9B,EAAE,2BAiDVgC,GAAG,QAASH,GAE1B9B,EAAQiC,GAAG,iBAAkB,IAAM/B,EAAgBgC,QAAQ,UAE3D,mBAAqBlC,EAAS,cAAe8B","file":"665.desktop.js","sourcesContent":["import libraryLoader from \"../services/library_loader.js\";\nimport toastService from \"../services/toast.js\";\nimport utils from \"../services/utils.js\";\nimport appContext from \"../services/app_context.js\";\n\nconst $dialog = $('#markdown-import-dialog');\nconst $importTextarea = $('#markdown-import-textarea');\nconst $importButton = $('#markdown-import-button');\n\nasync function convertMarkdownToHtml(text) {\n    await libraryLoader.requireLibrary(libraryLoader.COMMONMARK);\n\n    const reader = new commonmark.Parser();\n    const writer = new commonmark.HtmlRenderer();\n    const parsed = reader.parse(text);\n\n    const result = writer.render(parsed);\n\n    appContext.triggerCommand('executeInActiveEditor', {\n        callback: textEditor => {\n            const viewFragment = textEditor.data.processor.toView(result);\n            const modelFragment = textEditor.data.toModel(viewFragment);\n\n            textEditor.model.insertContent(modelFragment, textEditor.model.document.selection);\n\n            toastService.showMessage(\"Markdown content has been imported into the document.\");\n        }\n    });\n}\n\nexport async function importMarkdownInline() {\n    if (appContext.tabManager.getActiveTabNoteType() !== 'text') {\n        return;\n    }\n\n    if (utils.isElectron()) {\n        const {clipboard} = utils.dynamicRequire('electron');\n        const text = clipboard.readText();\n\n        convertMarkdownToHtml(text);\n    }\n    else {\n        utils.openDialog($dialog);\n    }\n}\n\nasync function sendForm() {\n    const text = $importTextarea.val();\n\n    $dialog.modal('hide');\n\n    await convertMarkdownToHtml(text);\n\n    $importTextarea.val('');\n}\n\n$importButton.on('click', sendForm);\n\n$dialog.on('shown.bs.modal', () => $importTextarea.trigger('focus'));\n\nutils.bindElShortcut($dialog, 'ctrl+return', sendForm);"],"sourceRoot":""}