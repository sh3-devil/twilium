{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/markdown_import.js","webpack://trilium/./src/public/app/services/library_loader.js"],"names":["$dialog","$","$importTextarea","async","convertMarkdownToHtml","text","reader","commonmark","Parser","writer","HtmlRenderer","parsed","parse","result","render","callback","textEditor","viewFragment","data","processor","toView","modelFragment","toModel","model","insertContent","document","selection","importMarkdownInline","clipboard","readText","sendForm","val","modal","on","trigger","loadedScriptPromises","requireScript","url","ajax","dataType","cache","requireCss","Array","from","querySelectorAll","map","el","href","some","l","endsWith","append","attr","requireLibrary","library","css","cssUrl","js","scriptUrl","CKEDITOR","CODE_MIRROR","ESLINT","COMMONMARK","RELATION_MAP","LINK_MAP","PRINT_THIS","KNOCKOUT","CALENDAR_WIDGET"],"mappings":"qLAKA,MAAMA,EAAUC,EAAE,2BACZC,EAAkBD,EAAE,6BAG1BE,eAAeC,EAAsBC,SAC3B,mBAA6B,gBAEnC,MAAMC,EAAS,IAAIC,WAAWC,OACxBC,EAAS,IAAIF,WAAWG,aACxBC,EAASL,EAAOM,MAAMP,GAEtBQ,EAASJ,EAAOK,OAAOH,GAE7B,yBAA0B,wBAAyB,CAC/CI,SAAUC,IACN,MAAMC,EAAeD,EAAWE,KAAKC,UAAUC,OAAOP,GAChDQ,EAAgBL,EAAWE,KAAKI,QAAQL,GAE9CD,EAAWO,MAAMC,cAAcH,EAAeL,EAAWO,MAAME,SAASC,WAExE,sBAAyB,4DAK9BvB,eAAewB,IAClB,GAAqD,SAAjD,4CAIJ,GAAI,iBAAoB,CACpB,MAAM,UAACC,GAAa,mBAAqB,YAGzCxB,EAFawB,EAAUC,iBAKvB,eAAiB7B,GAIzBG,eAAe2B,IACX,MAAMzB,EAAOH,EAAgB6B,MAE7B/B,EAAQgC,MAAM,cAER5B,EAAsBC,GAE5BH,EAAgB6B,IAAI,IA9CF9B,EAAE,2BAiDVgC,GAAG,QAASH,GAE1B9B,EAAQiC,GAAG,iBAAkB,IAAM/B,EAAgBgC,QAAQ,UAE3D,mBAAqBlC,EAAS,cAAe8B,I,4CCI7C,MAAMK,EAAuB,GAE7BhC,eAAeiC,EAAcC,GACpBF,EAAqBE,KACtBF,EAAqBE,GAAOpC,EAAEqC,KAAK,CAC/BD,IAAKA,EACLE,SAAU,SACVC,OAAO,WAITL,EAAqBE,GAG/BlC,eAAesC,EAAWJ,GACLK,MACZC,KAAKlB,SAASmB,iBAAiB,SAC/BC,IAAIC,GAAMA,EAAGC,MAEJC,KAAKC,GAAKA,EAAEC,SAASb,KAC/BpC,EAAE,QAAQkD,OAAOlD,EAAE,6CAA6CmD,KAAK,OAAQf,IAIrF,SACII,aACAY,eAvCJlD,eAA8BmD,GAK1B,GAJIA,EAAQC,KACRD,EAAQC,IAAIV,IAAIW,GAAUf,EAAWe,IAGrCF,EAAQG,GACR,IAAK,MAAMC,KAAaJ,EAAQG,SACtBrB,EAAcsB,IAiC5BC,SA3Fa,CAAC,GAAM,CAAC,mCA4FrBC,YA1FgB,CAChBH,GAAI,CACA,qCACA,8CACA,8CACA,mDACA,+CACA,yDACA,oCACA,0CACA,6CAEJF,IAAK,CACD,sCACA,6CA6EJM,OAzEW,CAACJ,GAAI,CAAC,wBA0EjBK,WAxEe,CAACL,GAAI,CAAC,gCAyErBM,aAvEiB,CACjBN,GAAI,CACA,uBACA,wBAEJF,IAAK,CACD,iCAkEJS,SA9Da,CACbP,GAAI,CACA,uBACA,uBACA,wBAEJF,IAAK,CACD,6BAwDJU,WApDe,CAACR,GAAI,CAAC,2BAqDrBS,SAnDa,CAACT,GAAI,CAAC,8BAoDnBU,gBAlDoB,CAACZ,IAAK,CAAC","file":"665.setup.js","sourcesContent":["import libraryLoader from \"../services/library_loader.js\";\nimport toastService from \"../services/toast.js\";\nimport utils from \"../services/utils.js\";\nimport appContext from \"../services/app_context.js\";\n\nconst $dialog = $('#markdown-import-dialog');\nconst $importTextarea = $('#markdown-import-textarea');\nconst $importButton = $('#markdown-import-button');\n\nasync function convertMarkdownToHtml(text) {\n    await libraryLoader.requireLibrary(libraryLoader.COMMONMARK);\n\n    const reader = new commonmark.Parser();\n    const writer = new commonmark.HtmlRenderer();\n    const parsed = reader.parse(text);\n\n    const result = writer.render(parsed);\n\n    appContext.triggerCommand('executeInActiveEditor', {\n        callback: textEditor => {\n            const viewFragment = textEditor.data.processor.toView(result);\n            const modelFragment = textEditor.data.toModel(viewFragment);\n\n            textEditor.model.insertContent(modelFragment, textEditor.model.document.selection);\n\n            toastService.showMessage(\"Markdown content has been imported into the document.\");\n        }\n    });\n}\n\nexport async function importMarkdownInline() {\n    if (appContext.tabManager.getActiveTabNoteType() !== 'text') {\n        return;\n    }\n\n    if (utils.isElectron()) {\n        const {clipboard} = utils.dynamicRequire('electron');\n        const text = clipboard.readText();\n\n        convertMarkdownToHtml(text);\n    }\n    else {\n        utils.openDialog($dialog);\n    }\n}\n\nasync function sendForm() {\n    const text = $importTextarea.val();\n\n    $dialog.modal('hide');\n\n    await convertMarkdownToHtml(text);\n\n    $importTextarea.val('');\n}\n\n$importButton.on('click', sendForm);\n\n$dialog.on('shown.bs.modal', () => $importTextarea.trigger('focus'));\n\nutils.bindElShortcut($dialog, 'ctrl+return', sendForm);","const CKEDITOR = {\"js\": [\"libraries/ckeditor/ckeditor.js\"]};\n\nconst CODE_MIRROR = {\n    js: [\n        \"libraries/codemirror/codemirror.js\",\n        \"libraries/codemirror/addon/mode/loadmode.js\",\n        \"libraries/codemirror/addon/fold/xml-fold.js\",\n        \"libraries/codemirror/addon/edit/matchbrackets.js\",\n        \"libraries/codemirror/addon/edit/matchtags.js\",\n        \"libraries/codemirror/addon/search/match-highlighter.js\",\n        \"libraries/codemirror/mode/meta.js\",\n        \"libraries/codemirror/addon/lint/lint.js\",\n        \"libraries/codemirror/addon/lint/eslint.js\"\n    ],\n    css: [\n        \"libraries/codemirror/codemirror.css\",\n        \"libraries/codemirror/addon/lint/lint.css\"\n    ]\n};\n\nconst ESLINT = {js: [\"libraries/eslint.js\"]};\n\nconst COMMONMARK = {js: [\"libraries/commonmark.min.js\"]};\n\nconst RELATION_MAP = {\n    js: [\n        \"libraries/jsplumb.js\",\n        \"libraries/panzoom.js\"\n    ],\n    css: [\n        \"stylesheets/relation_map.css\"\n    ]\n};\n\nconst LINK_MAP = {\n    js: [\n        \"libraries/jsplumb.js\",\n        \"libraries/panzoom.js\",\n        \"libraries/springy.js\"\n    ],\n    css: [\n        \"stylesheets/link_map.css\"\n    ]\n};\n\nconst PRINT_THIS = {js: [\"libraries/printThis.js\"]};\n\nconst KNOCKOUT = {js: [\"libraries/knockout.min.js\"]};\n\nconst CALENDAR_WIDGET = {css: [\"stylesheets/calendar.css\"]};\n\nasync function requireLibrary(library) {\n    if (library.css) {\n        library.css.map(cssUrl => requireCss(cssUrl));\n    }\n\n    if (library.js) {\n        for (const scriptUrl of library.js) {\n            await requireScript(scriptUrl);\n        }\n    }\n}\n\n// we save the promises in case of the same script being required concurrently multiple times\nconst loadedScriptPromises = {};\n\nasync function requireScript(url) {\n    if (!loadedScriptPromises[url]) {\n        loadedScriptPromises[url] = $.ajax({\n            url: url,\n            dataType: \"script\",\n            cache: true\n        });\n    }\n\n    await loadedScriptPromises[url];\n}\n\nasync function requireCss(url) {\n    const cssLinks = Array\n        .from(document.querySelectorAll('link'))\n        .map(el => el.href);\n\n    if (!cssLinks.some(l => l.endsWith(url))) {\n        $('head').append($('<link rel=\"stylesheet\" type=\"text/css\" />').attr('href', url));\n    }\n}\n\nexport default {\n    requireCss,\n    requireLibrary,\n    CKEDITOR,\n    CODE_MIRROR,\n    ESLINT,\n    COMMONMARK,\n    RELATION_MAP,\n    LINK_MAP,\n    PRINT_THIS,\n    KNOCKOUT,\n    CALENDAR_WIDGET\n}"],"sourceRoot":""}