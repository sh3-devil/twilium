{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/options/code_notes.js"],"names":["CodeNotesOptions","$","html","this","$mimeTypes","empty","idCtr","mimeType","id","append","attr","mime","prop","enabled","on","save","text","title","enabledMimeTypes","find","each","i","el","push","JSON","stringify"],"mappings":"0JAQe,MAAMA,EACjB,cACIC,EAAE,uBAAuBC,KAPrB,0JASJC,KAAKC,WAAaH,EAAE,uBAGxB,sBACIE,KAAKC,WAAWC,QAEhB,IAAIC,EAAQ,EAEZ,IAAK,MAAMC,WAAkB,mBAAiC,CAC1D,MAAMC,EAAK,kBAAqBF,IAEhCH,KAAKC,WAAWK,OAAOR,EAAE,QACpBQ,OAAOR,EAAE,2BACLS,KAAK,KAAMF,GACXE,KAAK,iBAAkBH,EAASI,MAChCC,KAAK,UAAWL,EAASM,UACzBC,GAAG,SAAU,IAAMX,KAAKY,QAC5BN,OAAO,YACPA,OAAOR,EAAE,WACLS,KAAK,MAAOF,GACZQ,KAAKT,EAASU,UAK/B,aACI,MAAMC,EAAmB,GAEzBf,KAAKC,WAAWe,KAAK,iBAAiBC,KAClC,CAACC,EAAGC,IAAOJ,EAAiBK,KAAKtB,EAAEqB,GAAIZ,KAAK,0BAE1C,SAAa,qBAAsBc,KAAKC,UAAUP,IAExD","file":"358.mobile.js","sourcesContent":["import mimeTypesService from \"../../services/mime_types.js\";\nimport options from \"../../services/options.js\";\n\nconst TPL = `\n<h4>Available MIME types in the dropdown</h4>\n\n<ul id=\"options-mime-types\" style=\"max-height: 500px; overflow: auto; list-style-type: none;\"></ul>`;\n\nexport default class CodeNotesOptions {\n    constructor() {\n        $(\"#options-code-notes\").html(TPL);\n\n        this.$mimeTypes = $(\"#options-mime-types\");\n    }\n\n    async optionsLoaded() {\n        this.$mimeTypes.empty();\n\n        let idCtr = 1;\n\n        for (const mimeType of await mimeTypesService.getMimeTypes()) {\n            const id = \"code-mime-type-\" + (idCtr++);\n\n            this.$mimeTypes.append($(\"<li>\")\n                .append($('<input type=\"checkbox\">')\n                    .attr(\"id\", id)\n                    .attr(\"data-mime-type\", mimeType.mime)\n                    .prop(\"checked\", mimeType.enabled))\n                    .on('change', () => this.save())\n                .append(\" &nbsp; \")\n                .append($('<label>')\n                    .attr(\"for\", id)\n                    .text(mimeType.title))\n            );\n        }\n    }\n\n    async save() {\n        const enabledMimeTypes = [];\n\n        this.$mimeTypes.find(\"input:checked\").each(\n            (i, el) => enabledMimeTypes.push($(el).attr(\"data-mime-type\")));\n\n        await options.save('codeNotesMimeTypes', JSON.stringify(enabledMimeTypes));\n\n        mimeTypesService.loadMimeTypes();\n    }\n}"],"sourceRoot":""}