{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/recent_changes.js"],"names":["$dialog","$","$content","async","showDialog","ancestorNoteId","recentChangesRows","map","r","noteId","empty","length","append","groupedByDate","rows","Map","row","dateDay","date","substr","has","set","get","push","groupByDate","dayChanges","$changesList","dayEl","text","change","formattedTime","$noteLink","current_isDeleted","current_title","canBeUndeleted","$undeleteLink","on","confirmDialog","confirm","modal","setNote","note","notePath","title","showNotePath","attr"],"mappings":"gNAQA,MAAMA,EAAUC,EAAE,0BACZC,EAAWD,EAAE,2BAEZE,eAAeC,EAAWC,GAC7B,eAAiBL,GAEZK,IACDA,EAAiB,wBAGrB,MAAMC,QAA0B,QAAW,kBAAoBD,SAGzD,aAAmBC,EAAkBC,IAAIC,GAAKA,EAAEC,SAAS,GAE/DP,EAASQ,QAEwB,IAA7BJ,EAAkBK,QAClBT,EAASU,OAAO,sBAGpB,MAAMC,EAoEV,SAAqBC,GACjB,MAAMD,EAAgB,IAAIE,IAE1B,IAAK,MAAMC,KAAOF,EAAM,CACpB,MAAMG,EAAUD,EAAIE,KAAKC,OAAO,EAAG,IAE9BN,EAAcO,IAAIH,IACnBJ,EAAcQ,IAAIJ,EAAS,IAG/BJ,EAAcS,IAAIL,GAASM,KAAKP,GAGpC,OAAOH,EAjFeW,CAAYlB,GAElC,IAAK,MAAOW,EAASQ,KAAeZ,EAAe,CAC/C,MAAMa,EAAezB,EAAE,QAEjB0B,EAAQ1B,EAAE,SAASW,OAAOX,EAAE,OAAO2B,KAAKX,IAAUL,OAAOc,GAE/D,IAAK,MAAMG,KAAUJ,EAAY,CAC7B,MAAMK,EAAgBD,EAAOX,KAAKC,OAAO,GAAI,GAE7C,IAAIY,EAEJ,GAAIF,EAAOG,mBAGP,GAFAD,EAAY9B,EAAE,UAAU2B,KAAKC,EAAOI,eAEhCJ,EAAOK,eAAgB,CACvB,MAAMC,EAAgBlC,EAAE,0BACnB2B,KAAK,YACLQ,GAAG,QAASjC,UACT,MAAMkC,QAAsB,mCAGlBA,EAAcC,QAFX,gEAGH,QAAW,SAAST,EAAOpB,mBAEjCT,EAAQuC,MAAM,cAER,gBAAsB,CAACV,EAAOpB,SAEpC,2CAA4C+B,QAAQX,EAAOpB,WAIvEsB,EACKnB,OAAO,MACPA,OAAOuB,GACPvB,OAAO,UAGf,CACD,MAAM6B,QAAa,YAAkBZ,EAAOpB,QACtCiC,QAAiB,oBAA4BD,GAG/CV,EADAW,QACkB,mBAA2BA,EAAU,CACnDC,MAAOd,EAAOc,MACdC,cAAc,IAIN3C,EAAE,UAAU2B,KAAKa,EAAKE,OAI1CjB,EAAad,OAAOX,EAAE,QACjBW,OACGX,EAAE,UACG2B,KAAKE,GACLe,KAAK,QAAShB,EAAOX,OAE7BN,OAAO,OACPA,OAAOmB,IAGhB7B,EAASU,OAAOe","file":"583.desktop.js","sourcesContent":["import linkService from '../services/link.js';\nimport utils from '../services/utils.js';\nimport server from '../services/server.js';\nimport treeService from \"../services/tree.js\";\nimport treeCache from \"../services/tree_cache.js\";\nimport appContext from \"../services/app_context.js\";\nimport hoistedNoteService from \"../services/hoisted_note.js\";\n\nconst $dialog = $(\"#recent-changes-dialog\");\nconst $content = $(\"#recent-changes-content\");\n\nexport async function showDialog(ancestorNoteId) {\n    utils.openDialog($dialog);\n\n    if (!ancestorNoteId) {\n        ancestorNoteId = hoistedNoteService.getHoistedNoteId();\n    }\n\n    const recentChangesRows = await server.get('recent-changes/' + ancestorNoteId);\n\n    // preload all notes into cache\n    await treeCache.getNotes(recentChangesRows.map(r => r.noteId), true);\n\n    $content.empty();\n\n    if (recentChangesRows.length === 0) {\n        $content.append(\"No changes yet ...\");\n    }\n\n    const groupedByDate = groupByDate(recentChangesRows);\n\n    for (const [dateDay, dayChanges] of groupedByDate) {\n        const $changesList = $('<ul>');\n\n        const dayEl = $('<div>').append($('<b>').text(dateDay)).append($changesList);\n\n        for (const change of dayChanges) {\n            const formattedTime = change.date.substr(11, 5);\n\n            let $noteLink;\n\n            if (change.current_isDeleted) {\n                $noteLink = $(\"<span>\").text(change.current_title);\n\n                if (change.canBeUndeleted) {\n                    const $undeleteLink = $(`<a href=\"javascript:\">`)\n                        .text(\"undelete\")\n                        .on('click', async () => {\n                            const confirmDialog = await import('../dialogs/confirm.js');\n                            const text = 'Do you want to undelete this note and its sub-notes?';\n\n                            if (await confirmDialog.confirm(text)) {\n                                await server.put(`notes/${change.noteId}/undelete`);\n\n                                $dialog.modal('hide');\n\n                                await treeCache.reloadNotes([change.noteId]);\n\n                                appContext.tabManager.getActiveTabContext().setNote(change.noteId);\n                            }\n                        });\n\n                    $noteLink\n                        .append(' (')\n                        .append($undeleteLink)\n                        .append(')');\n                }\n            }\n            else {\n                const note = await treeCache.getNote(change.noteId);\n                const notePath = await treeService.getSomeNotePath(note);\n\n                if (notePath) {\n                    $noteLink = await linkService.createNoteLink(notePath, {\n                        title: change.title,\n                        showNotePath: true\n                    });\n                }\n                else {\n                    $noteLink = $(\"<span>\").text(note.title);\n                }\n            }\n\n            $changesList.append($('<li>')\n                .append(\n                    $(\"<span>\")\n                        .text(formattedTime)\n                        .attr(\"title\", change.date)\n                )\n                .append(' - ')\n                .append($noteLink));\n        }\n\n        $content.append(dayEl);\n    }\n}\n\nfunction groupByDate(rows) {\n    const groupedByDate = new Map();\n\n    for (const row of rows) {\n        const dateDay = row.date.substr(0, 10);\n\n        if (!groupedByDate.has(dateDay)) {\n            groupedByDate.set(dateDay, []);\n        }\n\n        groupedByDate.get(dateDay).push(row);\n    }\n\n    return groupedByDate;\n}\n"],"sourceRoot":""}