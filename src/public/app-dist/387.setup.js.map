{"version":3,"sources":["webpack://trilium/./src/public/app/dialogs/note_revisions.js"],"names":["$dialog","$","$list","$listDropdown","$content","$title","$titleButtons","$eraseAllRevisionsButton","dropdown","parent","on","e","clickEvent","preventDefault","note","noteRevisionId","revisionItems","async","showCurrentNoteRevisions","showNoteRevisionsDialog","noteId","loadNoteRevisions","noteRevId","empty","item","append","text","dateLastEdited","substr","contentLength","attr","length","toggle","find","trigger","confirmDialog","confirm","modal","each","i","el","toggleClass","target","revisionItem","r","html","title","$restoreRevisionButton","$eraseRevisionButton","$downloadButton","url","fullNoteRevision","type","content","mime","css","$table","setContentPane"],"mappings":"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","file":"387.setup.js","sourcesContent":["import utils from '../services/utils.js';\nimport server from '../services/server.js';\nimport toastService from \"../services/toast.js\";\nimport appContext from \"../services/app_context.js\";\n\nconst $dialog = $(\"#note-revisions-dialog\");\nconst $list = $(\"#note-revision-list\");\nconst $listDropdown = $(\"#note-revision-list-dropdown\");\nconst $content = $(\"#note-revision-content\");\nconst $title = $(\"#note-revision-title\");\nconst $titleButtons = $(\"#note-revision-title-buttons\");\nconst $eraseAllRevisionsButton = $(\"#note-revisions-erase-all-revisions-button\");\n\n$listDropdown.dropdown();\n\n$listDropdown.parent().on('hide.bs.dropdown', e => {\n    // prevent closing dropdown by clicking outside\n    if (e.clickEvent) {\n        e.preventDefault();\n    }\n});\n\nlet revisionItems = [];\nlet note;\nlet noteRevisionId;\n\nexport async function showCurrentNoteRevisions() {\n    await showNoteRevisionsDialog(appContext.tabManager.getActiveTabNoteId());\n}\n\nexport async function showNoteRevisionsDialog(noteId, noteRevisionId) {\n    utils.openDialog($dialog);\n\n    await loadNoteRevisions(noteId, noteRevisionId);\n}\n\nasync function loadNoteRevisions(noteId, noteRevId) {\n    $list.empty();\n    $content.empty();\n    $titleButtons.empty();\n\n    note = appContext.tabManager.getActiveTabNote();\n    revisionItems = await server.get(`notes/${noteId}/revisions`);\n\n    for (const item of revisionItems) {\n        $list.append(\n            $('<a class=\"dropdown-item\" tabindex=\"0\">')\n                .text(item.dateLastEdited.substr(0, 16) + ` (${item.contentLength} bytes)`)\n                .attr('data-note-revision-id', item.noteRevisionId)\n                .attr('title', 'This revision was last edited on ' + item.dateLastEdited)\n        );\n    }\n\n    $listDropdown.dropdown('show');\n\n    noteRevisionId = noteRevId;\n\n    if (revisionItems.length > 0) {\n        if (!noteRevisionId) {\n            noteRevisionId = revisionItems[0].noteRevisionId;\n        }\n    } else {\n        $title.text(\"No revisions for this note yet...\");\n        noteRevisionId = null;\n    }\n\n    $eraseAllRevisionsButton.toggle(revisionItems.length > 0);\n}\n\n$dialog.on('shown.bs.modal', () => {\n    $list.find(`[data-note-revision-id=\"${noteRevisionId}\"]`)\n        .trigger('focus');\n});\n\nasync function setContentPane() {\n    const noteRevisionId = $list.find(\".active\").attr('data-note-revision-id');\n\n    const revisionItem = revisionItems.find(r => r.noteRevisionId === noteRevisionId);\n\n    $titleButtons.empty();\n    $content.empty();\n\n    $title.html(revisionItem.title);\n\n    const $restoreRevisionButton = $('<button class=\"btn btn-sm\" type=\"button\">Restore this revision</button>');\n\n    $restoreRevisionButton.on('click', async () => {\n        const confirmDialog = await import('../dialogs/confirm.js');\n        const text = 'Do you want to restore this revision? This will overwrite current title/content of the note with this revision.';\n\n        if (await confirmDialog.confirm(text)) {\n            await server.put(`notes/${revisionItem.noteId}/restore-revision/${revisionItem.noteRevisionId}`);\n\n            $dialog.modal('hide');\n\n            toastService.showMessage('Note revision has been restored.');\n        }\n    });\n\n    const $eraseRevisionButton = $('<button class=\"btn btn-sm\" type=\"button\">Delete this revision</button>');\n\n    $eraseRevisionButton.on('click', async () => {\n        const confirmDialog = await import('../dialogs/confirm.js');\n        const text = 'Do you want to delete this revision? This action will delete revision title and content, but still preserve revision metadata.';\n\n        if (await confirmDialog.confirm(text)) {\n            await server.remove(`notes/${revisionItem.noteId}/revisions/${revisionItem.noteRevisionId}`);\n\n            loadNoteRevisions(revisionItem.noteId);\n\n            toastService.showMessage('Note revision has been deleted.');\n        }\n    });\n\n    $titleButtons\n        .append($restoreRevisionButton)\n        .append(' &nbsp; ')\n        .append($eraseRevisionButton)\n        .append(' &nbsp; ');\n\n    const $downloadButton = $('<button class=\"btn btn-sm btn-primary\" type=\"button\">Download</button>');\n\n    $downloadButton.on('click', () => {\n        const url = utils.getUrlForDownload(`api/notes/${revisionItem.noteId}/revisions/${revisionItem.noteRevisionId}/download`);\n\n        utils.download(url);\n    });\n\n    $titleButtons.append($downloadButton);\n\n    const fullNoteRevision = await server.get(`notes/${revisionItem.noteId}/revisions/${revisionItem.noteRevisionId}`);\n\n    if (revisionItem.type === 'text') {\n        $content.html(fullNoteRevision.content);\n    }\n    else if (revisionItem.type === 'code') {\n        $content.html($(\"<pre>\").text(fullNoteRevision.content));\n    }\n    else if (revisionItem.type === 'image') {\n        $content.html($(\"<img>\")\n            // reason why we put this inline as base64 is that we do not want to let user to copy this\n            // as a URL to be used in a note. Instead if they copy and paste it into a note, it will be a uploaded as a new note\n            .attr(\"src\", `data:${note.mime};base64,` + fullNoteRevision.content)\n            .css(\"max-width\", \"100%\")\n            .css(\"max-height\", \"100%\"));\n    }\n    else if (revisionItem.type === 'file') {\n        const $table = $(\"<table cellpadding='10'>\")\n            .append($(\"<tr>\").append(\n                $(\"<th>\").text(\"MIME: \"),\n                $(\"<td>\").text(revisionItem.mime)\n            ))\n            .append($(\"<tr>\").append(\n                $(\"<th>\").text(\"File size:\"),\n                $(\"<td>\").text(revisionItem.contentLength + \" bytes\")\n            ));\n\n        if (fullNoteRevision.content) {\n            $table.append($(\"<tr>\").append(\n                $(\"<th>\").text(\"Preview:\"),\n                $(\"<td>\").append(\n                    $('<pre class=\"file-preview-content\"></pre>')\n                        .text(fullNoteRevision.content)\n                )\n            ));\n        }\n\n        $content.html($table);\n    }\n    else {\n        $content.text(\"Preview isn't available for this note type.\");\n    }\n}\n\n$eraseAllRevisionsButton.on('click', async () => {\n    const confirmDialog = await import('../dialogs/confirm.js');\n    const text = 'Do you want to delete all revisions of this note? This action will erase revision title and content, but still preserve revision metadata.';\n\n    if (await confirmDialog.confirm(text)) {\n        await server.remove(`notes/${note.noteId}/revisions`);\n\n        $dialog.modal('hide');\n\n        toastService.showMessage('Note revisions has been deleted.');\n    }\n});\n\n$list.on('click', '.dropdown-item', e => {\n   e.preventDefault();\n   return false;\n});\n\n$list.on('focus', '.dropdown-item', e => {\n    $list.find('.dropdown-item').each((i, el) => {\n        $(el).toggleClass('active', el === e.target);\n    });\n\n    setContentPane();\n});"],"sourceRoot":""}